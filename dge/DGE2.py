#/usr/bin/env python
#coding=utf-8

import os
import argparse

parser = argparse.ArgumentParser(description='Extracting Digital Gene Expression (step2, generate a DGE txt file)(extract_cell_bc.py is needed): \
                                              python DGE2.py \
                                              -b bam_file \
                                              -m T / F \
                                              -f Y / N \
                                              -c cell_selection_num \
                                              -n num_cell_barcode' )

parser.add_argument('-b', '--bam_file', type=str, required=True, help='my_clean.bam generated by DGE1.py')
parser.add_argument('-m', '--mix', type=str, required=True, help='T/True: human+mouse; F/False: human/mouse')
parser.add_argument('-f', '--filter', type=str, default='', help='This is required when "mix = True". FilterBam finished or not')
parser.add_argument('-c', '--cell_selection', type=str, default='', help='This is required when "mix = True". How many cell barcodes you want to extract from out_cell_readcounts.txt to generate cell_bc_file.txt, which is used to extract human/mouse DGE.')
parser.add_argument('-n', '--num_cell_barcode', type=str, default='', help='This is required when "mix = False". NUM_CORE_BARCODES / how many cells you want to extract from your BAM? / The number of cell barcodes to the left of the inflection point in the Rplots.pdf generated by DGE1.py')

args = parser.parse_args()

if (args.mix=='T') or (args.mix=='True'):
    if (args.filter == 'N'):
        os.system("FilterBam INPUT=my_clean.bam OUTPUT=human.bam  REF_SOFT_MATCHED_RETAINED=HUMAN")
        os.system("FilterBam INPUT=my_clean.bam OUTPUT=mouse.bam  REF_SOFT_MATCHED_RETAINED=MOUSE")

        os.system("cp out_cell_readcounts.txt.gz cell_readcounts.txt.gz")
        os.system("gunzip cell_readcounts.txt.gz")
        os.system("mv cell_readcounts.txt out_cell_readcounts.txt")
    os.system("python extract_cell_bc.py out_cell_readcounts.txt %s" %(args.cell_selection))

    os.system("DigitalExpression I=human.bam O=human_gene_exon_tagged_%s.dge.txt.gz \
               SUMMARY=human_gene_exon_tagged_%s.dge.summary.txt \
               CELL_BC_FILE=cell_bc_file_%s.txt TMP_DIR=tmp" %(args.cell_selection, args.cell_selection, args.cell_selection))
    os.system("DigitalExpression I=mouse.bam O=mouse_gene_exon_tagged_%s.dge.txt.gz \
               SUMMARY=mouse_gene_exon_tagged_%s.dge.summary.txt \
               CELL_BC_FILE=cell_bc_file_%s.txt TMP_DIR=tmp" %(args.cell_selection, args.cell_selection, args.cell_selection))
    
elif (args.mix=='F') or (args.mix=='False'):
    os.system("DigitalExpression I=%s O=out_gene_exon_tagged_%s.dge.txt.gz \
               SUMMARY=out_gene_exon_tagged_%s.dge.summary.txt \
               NUM_CORE_BARCODES=%s TMP_DIR=tmp" %(args.bam_file, args.num_cell_barcode, args.num_cell_barcode, args.num_cell_barcode))

else:
    print('ERROR!')


